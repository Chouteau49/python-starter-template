# This workflow will install Python dependencies, run tests, lint, and measure coverage
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Linting et Formatage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Installer les d√©pendances
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install -e .[dev]

      - name: V√©rifier les d√©pendances install√©es
        run: |
          . venv/bin/activate
          pip list

      - name: Linting avec Ruff
        run: |
          . venv/bin/activate
          ruff check src tests

  test:
    name: Tests Unitaires et Couverture
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Installer les d√©pendances
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install .[dev]

      - name: V√©rifier les d√©pendances install√©es
        run: |
          . venv/bin/activate
          pip list

      - name: V√©rifier la pr√©sence de _version.py
        run: |
          find venv -name _version.py || true

      - name: Ex√©cuter les tests avec couverture
        run: |
          . venv/bin/activate
          pytest --cov=src --cov-report=xml --cov-report=html

      - name: Upload des rapports de couverture
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella


  build-and-push:
      name: Build et Push Docker Image
      runs-on: ubuntu-latest
      needs: test
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
      outputs:
        image-tag: ${{ steps.meta.outputs.tags }}
        image-digest: ${{ steps.build.outputs.digest }}

      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0  # R√©cup√®re tous les tags pour setuptools-scm

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Log in to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Extract metadata
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            tags: |
              type=raw,value=latest
              type=sha,prefix={{branch}}-
              type=semver,pattern={{version}}
              type=semver,pattern={{major}}.{{minor}}

        - name: Get version for build
          id: version
          run: |
            # R√©cup√®re le dernier tag ou utilise un fallback
            VERSION=$(git describe --tags --always 2>/dev/null || echo "0.0.0")

            # Si c'est juste un SHA (pas de tag trouv√©)
            if [[ ! "$VERSION" =~ ^v?[0-9] ]]; then
              VERSION="0.0.0-${VERSION}"
            else
              # Supprime le 'v' initial si pr√©sent
              VERSION=${VERSION#v}

              # Convertit format git (1.4.0-1-g0c70a06) en PEP 440 (1.4.0.post1+g0c70a06)
              if [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)-g([0-9a-f]+)$ ]]; then
                BASE="${BASH_REMATCH[1]}"
                COMMITS="${BASH_REMATCH[2]}"
                SHA="${BASH_REMATCH[3]}"
                VERSION="${BASE}.post${COMMITS}-${SHA}"
              fi
            fi

            # Validation du format du tag Docker
            if [[ ! "$VERSION" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
              echo "::error::Tag Docker invalide: $VERSION"
              exit 1
            fi

            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

        - name: Build and push Docker image
          id: build
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./docker/Dockerfile
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            build-args: |
              UNAME=julien
              UID=1000
              GID=1000
              SETUPTOOLS_SCM_PRETEND_VERSION=${{ steps.version.outputs.VERSION }}

        - name: Notification de succ√®s
          if: success()
          run: |
            echo "‚úÖ Build Docker r√©ussi"
            echo "üê≥ Image: ${{ steps.meta.outputs.tags }}"
            echo "üì¶ Digest: ${{ steps.build.outputs.digest }}"
            echo "üîÑ Watchtower d√©tectera automatiquement la mise √† jour dans les 5 minutes"
