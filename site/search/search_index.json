{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Starter Template","text":"<p>Un template structur\u00e9 et pr\u00eat \u00e0 l'emploi pour d\u00e9marrer rapidement vos projets Python. Con\u00e7u pour \u00eatre modulaire, \u00e9volutif et adapt\u00e9 aux meilleures pratiques de d\u00e9veloppement logiciel moderne (Python 3.13+, POO, SOLID, TDD, etc.).</p>"},{"location":"#fonctionnalites-principales","title":"Fonctionnalit\u00e9s principales","text":"<ul> <li>Architecture modulaire : Couches claires (core, models, services, handlers, db, repo)</li> <li>Typage statique : Utilisation de Pydantic et annotations PEP 484/585</li> <li>Syst\u00e8me de logs avanc\u00e9 : Couleurs, rotation, archivage, timezone Paris</li> <li>Tests complets : Unitaire, int\u00e9gration, E2E avec couverture 85%+</li> <li>Linting et formatage : Ruff pour qualit\u00e9 et coh\u00e9rence</li> <li>D\u00e9ploiement moderne : Docker multi-\u00e9tapes, stacks Portainer</li> <li>CI/CD : GitHub Actions pour automatisation compl\u00e8te</li> <li>Documentation : MkDocs avec diagrammes et guides d\u00e9taill\u00e9s</li> </ul>"},{"location":"#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<pre><code># Cloner le repo\ngit clone https://github.com/Chouteau49/python-starter-template.git\ncd python-starter-template\n\n# Installer les d\u00e9pendances\npip install -e .[dev]\n\n# Configurer les variables d'env\ncp .env.example .env\n# \u00c9diter .env avec vos valeurs\n\n# Lancer les tests\npytest\n\n# Construire et lancer avec Docker\ndocker-compose up --build\n</code></pre>"},{"location":"#structure-du-projet","title":"Structure du projet","text":"<pre><code>\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 app/\n\u2502       \u251c\u2500\u2500 core/          # Configuration globale\n\u2502       \u251c\u2500\u2500 models/        # Mod\u00e8les de donn\u00e9es (Pydantic)\n\u2502       \u251c\u2500\u2500 services/      # Logique m\u00e9tier\n\u2502       \u251c\u2500\u2500 handlers/      # Gestion des requ\u00eates (FastAPI)\n\u2502       \u251c\u2500\u2500 db/            # Acc\u00e8s base de donn\u00e9es\n\u2502       \u2514\u2500\u2500 repo/          # Interfaces repositories\n\u251c\u2500\u2500 tests/                 # Tests unitaires et int\u00e9gration\n\u251c\u2500\u2500 docs/                  # Documentation MkDocs\n\u251c\u2500\u2500 docker/                # Dockerfiles et compose\n\u2514\u2500\u2500 .github/               # Workflows CI/CD et instructions Copilot\n</code></pre>"},{"location":"#philosophie","title":"Philosophie","text":"<p>Ce template suit les principes modernes de d\u00e9veloppement Python :</p> <ul> <li>POO et SOLID : Programmation orient\u00e9e objet avec principes SOLID</li> <li>TDD : Tests d'abord, couverture \u00e9lev\u00e9e</li> <li>Qualit\u00e9 : Linting automatique, formatage, hooks pre-commit</li> <li>Performance : Async/await, optimisation profiling</li> <li>S\u00e9curit\u00e9 : Validation des entr\u00e9es, gestion des secrets</li> <li>Maintenabilit\u00e9 : Architecture claire, documentation compl\u00e8te</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation compl\u00e8te</li> <li>Issues GitHub</li> <li>Discussions \u0000 \u0000</li> </ul>"},{"location":"api/","title":"API","text":""},{"location":"api/#vue-densemble","title":"Vue d'ensemble","text":"<p>L'application expose une API REST utilisant FastAPI pour la gestion des utilisateurs. L'API suit les conventions RESTful et fournit des endpoints CRUD (Create, Read, Update, Delete) pour les utilisateurs.</p>"},{"location":"api/#endpoints-disponibles","title":"Endpoints disponibles","text":""},{"location":"api/#creer-un-utilisateur","title":"Cr\u00e9er un utilisateur","text":"<pre><code>POST /users/\n</code></pre> <p>Corps de la requ\u00eate :</p> <pre><code>{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\"\n}\n</code></pre> <p>R\u00e9ponse de succ\u00e8s (201) :</p> <pre><code>{\n  \"id\": 1,\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\"\n}\n</code></pre> <p>Erreurs possibles :</p> <ul> <li><code>400 Bad Request</code> : Donn\u00e9es invalides (email d\u00e9j\u00e0 utilis\u00e9, format incorrect)</li> <li><code>422 Unprocessable Entity</code> : Validation Pydantic \u00e9chou\u00e9e</li> </ul>"},{"location":"api/#recuperer-un-utilisateur","title":"R\u00e9cup\u00e9rer un utilisateur","text":"<pre><code>GET /users/{user_id}\n</code></pre> <p>Param\u00e8tres : - <code>user_id</code> (integer, requis) : ID de l'utilisateur</p> <p>R\u00e9ponse de succ\u00e8s (200) : <pre><code>{\n  \"id\": 1,\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\"\n}\n</code></pre></p> <p>Erreurs possibles : - <code>404 Not Found</code> : Utilisateur non trouv\u00e9</p>"},{"location":"api/#recuperer-tous-les-utilisateurs","title":"R\u00e9cup\u00e9rer tous les utilisateurs","text":"<pre><code>GET /users/\n</code></pre> <p>R\u00e9ponse de succ\u00e8s (200) : <pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane.smith@example.com\"\n  }\n]\n</code></pre></p>"},{"location":"api/#mettre-a-jour-un-utilisateur","title":"Mettre \u00e0 jour un utilisateur","text":"<pre><code>PUT /users/{user_id}\n</code></pre> <p>Param\u00e8tres : - <code>user_id</code> (integer, requis) : ID de l'utilisateur</p> <p>Corps de la requ\u00eate : <pre><code>{\n  \"name\": \"John Smith\",\n  \"email\": \"john.smith@example.com\"\n}\n</code></pre></p> <p>R\u00e9ponse de succ\u00e8s (200) : <pre><code>{\n  \"id\": 1,\n  \"name\": \"John Smith\",\n  \"email\": \"john.smith@example.com\"\n}\n</code></pre></p> <p>Erreurs possibles : - <code>404 Not Found</code> : Utilisateur non trouv\u00e9 - <code>400 Bad Request</code> : Donn\u00e9es invalides</p>"},{"location":"api/#supprimer-un-utilisateur","title":"Supprimer un utilisateur","text":"<pre><code>DELETE /users/{user_id}\n</code></pre> <p>Param\u00e8tres : - <code>user_id</code> (integer, requis) : ID de l'utilisateur</p> <p>R\u00e9ponse de succ\u00e8s (204) : Aucune r\u00e9ponse (No Content)</p> <p>Erreurs possibles : - <code>404 Not Found</code> : Utilisateur non trouv\u00e9</p>"},{"location":"api/#modeles-de-donnees","title":"Mod\u00e8les de donn\u00e9es","text":""},{"location":"api/#user","title":"User","text":"<pre><code>class User(BaseModel):\n    id: int | None = None\n    name: str\n    email: EmailStr\n\n    class Config:\n        from_attributes = True\n</code></pre> <p>Champs : - <code>id</code> : Identifiant unique (auto-g\u00e9n\u00e9r\u00e9) - <code>name</code> : Nom de l'utilisateur (requis, string) - <code>email</code> : Adresse email (requis, doit \u00eatre valide)</p>"},{"location":"api/#validation-des-donnees","title":"Validation des donn\u00e9es","text":"<p>L'API utilise Pydantic pour valider automatiquement toutes les donn\u00e9es entrantes :</p> <ul> <li>Email : Doit \u00eatre une adresse email valide</li> <li>Name : Cha\u00eene non vide, longueur maximale 100 caract\u00e8res</li> <li>ID : Entier positif</li> </ul>"},{"location":"api/#gestion-derreurs","title":"Gestion d'erreurs","text":"<p>Toutes les erreurs suivent un format standard :</p> <pre><code>{\n  \"detail\": \"Description de l'erreur\"\n}\n</code></pre>"},{"location":"api/#authentification","title":"Authentification","text":"<p>Actuellement, l'API ne n\u00e9cessite pas d'authentification. En production, consid\u00e9rez :</p> <ul> <li>JWT tokens</li> <li>OAuth2</li> <li>API keys</li> <li>Basic Auth</li> </ul>"},{"location":"api/#limites-et-quotas","title":"Limites et quotas","text":"<ul> <li>Taille maximale du corps : 1MB</li> <li>Timeout des requ\u00eates : 30 secondes</li> <li>Rate limiting : Non impl\u00e9ment\u00e9 (\u00e0 ajouter selon les besoins)</li> </ul>"},{"location":"api/#exemples-dutilisation","title":"Exemples d'utilisation","text":""},{"location":"api/#python-avec-requests","title":"Python avec requests","text":"<pre><code>import requests\n\n# Cr\u00e9er un utilisateur\nresponse = requests.post(\"http://localhost:8000/users/\",\n    json={\"name\": \"Alice\", \"email\": \"alice@example.com\"})\nprint(response.json())\n\n# R\u00e9cup\u00e9rer tous les utilisateurs\nresponse = requests.get(\"http://localhost:8000/users/\")\nprint(response.json())\n</code></pre>"},{"location":"api/#javascript-avec-fetch","title":"JavaScript avec fetch","text":"<pre><code>// Cr\u00e9er un utilisateur\nfetch('/users/', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    name: 'Bob',\n    email: 'bob@example.com'\n  })\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n\n// R\u00e9cup\u00e9rer un utilisateur\nfetch('/users/1')\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n</code></pre>"},{"location":"api/#demarrage-de-lapi","title":"D\u00e9marrage de l'API","text":"<pre><code># Avec uvicorn (recommand\u00e9 pour le d\u00e9veloppement)\nuvicorn app.handlers.user_handler:app --reload --host 0.0.0.0 --port 8000\n\n# Avec Python directement\npython -c \"from app.handlers.user_handler import app; import uvicorn; uvicorn.run(app)\"\n\n# Avec Docker\ndocker run -p 8000:8000 python-starter-template\n</code></pre>"},{"location":"api/#documentation-interactive","title":"Documentation interactive","text":"<p>FastAPI g\u00e9n\u00e8re automatiquement une documentation interactive :</p> <ul> <li>Swagger UI : http://localhost:8000/docs</li> <li>ReDoc : http://localhost:8000/redoc</li> </ul> <p>Ces interfaces permettent de tester directement les endpoints depuis le navigateur. \u0000 \u0000</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#vue-densemble","title":"Vue d'ensemble","text":"<p>Ce template suit une architecture modulaire inspir\u00e9e des principes SOLID et des bonnes pratiques modernes de d\u00e9veloppement Python. L'application est organis\u00e9e en couches distinctes avec des responsabilit\u00e9s clairement s\u00e9par\u00e9es.</p>"},{"location":"architecture/#structure-des-dossiers","title":"Structure des dossiers","text":"<pre><code>src/\n\u251c\u2500\u2500 main.py                 # Point d'entr\u00e9e de l'application\n\u2514\u2500\u2500 app/                    # Package principal\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 _version.py         # Version g\u00e9n\u00e9r\u00e9e automatiquement\n    \u251c\u2500\u2500 application.py      # Classe principale de l'application\n    \u251c\u2500\u2500 core/               # Logique m\u00e9tier centrale\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 exceptions.py   # Exceptions personnalis\u00e9es\n    \u2502   \u2514\u2500\u2500 settings.py     # Configuration globale\n    \u251c\u2500\u2500 models/             # Mod\u00e8les de donn\u00e9es\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 user.py         # Mod\u00e8le User avec Pydantic\n    \u251c\u2500\u2500 services/           # Services m\u00e9tier\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 logs.py         # Service de logging\n    \u2502   \u251c\u2500\u2500 user_service.py # Logique m\u00e9tier utilisateur\n    \u2502   \u2514\u2500\u2500 email_notifier.py # Service d'envoi d'emails\n    \u251c\u2500\u2500 handlers/           # Gestionnaires de requ\u00eates\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 user_handler.py # Routes FastAPI pour les utilisateurs\n    \u251c\u2500\u2500 db/                 # Acc\u00e8s aux donn\u00e9es\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 connection.py   # Connexion et session DB\n    \u2514\u2500\u2500 repo/               # Interfaces et impl\u00e9mentations repository\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 user_repository.py # Repository pour les utilisateurs\n</code></pre>"},{"location":"architecture/#couches-architecturales","title":"Couches architecturales","text":""},{"location":"architecture/#1-couche-core-core","title":"1. Couche Core (<code>core/</code>)","text":"<p>Contient la logique m\u00e9tier centrale et les configurations globales.</p> <ul> <li><code>settings.py</code> : Configuration centralis\u00e9e avec Pydantic</li> <li><code>exceptions.py</code> : Exceptions personnalis\u00e9es pour l'application</li> </ul>"},{"location":"architecture/#2-couche-modeles-models","title":"2. Couche Mod\u00e8les (<code>models/</code>)","text":"<p>D\u00e9finitions des structures de donn\u00e9es avec validation Pydantic.</p> <ul> <li><code>user.py</code> : Mod\u00e8le User avec validation email et contraintes</li> </ul>"},{"location":"architecture/#3-couche-services-services","title":"3. Couche Services (<code>services/</code>)","text":"<p>Logique applicative et services transversaux.</p> <ul> <li><code>user_service.py</code> : R\u00e8gles m\u00e9tier pour la gestion des utilisateurs</li> <li><code>logs.py</code> : Service de logging avec Rich et rotation</li> <li><code>email_notifier.py</code> : Service d'envoi d'emails</li> </ul>"},{"location":"architecture/#4-couche-handlers-handlers","title":"4. Couche Handlers (<code>handlers/</code>)","text":"<p>Gestion des requ\u00eates HTTP et interfaces externes.</p> <ul> <li><code>user_handler.py</code> : Routes FastAPI pour l'API REST</li> </ul>"},{"location":"architecture/#5-couche-db-db","title":"5. Couche DB (<code>db/</code>)","text":"<p>Gestion de l'acc\u00e8s aux donn\u00e9es.</p> <ul> <li><code>connection.py</code> : Connexion SQLAlchemy et gestion des sessions</li> </ul>"},{"location":"architecture/#6-couche-repository-repo","title":"6. Couche Repository (<code>repo/</code>)","text":"<p>Abstraction de l'acc\u00e8s aux donn\u00e9es avec pattern Repository.</p> <ul> <li><code>user_repository.py</code> : Interface et impl\u00e9mentation pour les op\u00e9rations utilisateur</li> </ul>"},{"location":"architecture/#principes-solid-appliques","title":"Principes SOLID appliqu\u00e9s","text":""},{"location":"architecture/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>Chaque classe a une responsabilit\u00e9 unique :</p> <ul> <li><code>UserService</code> g\u00e8re uniquement la logique m\u00e9tier utilisateur</li> <li><code>UserRepository</code> g\u00e8re uniquement l'acc\u00e8s aux donn\u00e9es</li> <li><code>UserHandler</code> g\u00e8re uniquement les requ\u00eates HTTP</li> </ul>"},{"location":"architecture/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<p>Les classes sont ouvertes \u00e0 l'extension mais ferm\u00e9es \u00e0 la modification :</p> <ul> <li>Interfaces <code>UserRepository</code> permettent d'ajouter de nouvelles impl\u00e9mentations</li> <li>Services utilisent l'injection de d\u00e9pendances</li> </ul>"},{"location":"architecture/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>Les sous-classes peuvent remplacer leurs classes parentes :</p> <ul> <li><code>InMemoryUserRepository</code> peut remplacer toute impl\u00e9mentation de <code>UserRepository</code></li> </ul>"},{"location":"architecture/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>Interfaces sp\u00e9cifiques plut\u00f4t que g\u00e9n\u00e9rales :</p> <ul> <li><code>UserRepository</code> ne contient que les m\u00e9thodes n\u00e9cessaires pour les utilisateurs</li> </ul>"},{"location":"architecture/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>D\u00e9pendre d'abstractions, pas de concret :</p> <ul> <li><code>UserService</code> d\u00e9pend de <code>UserRepository</code> (interface), pas d'une impl\u00e9mentation sp\u00e9cifique</li> </ul>"},{"location":"architecture/#injection-de-dependances","title":"Injection de d\u00e9pendances","text":"<p>L'application utilise l'injection de d\u00e9pendances pour d\u00e9coupler les composants :</p> <pre><code># Dans application.py\nuser_repo = InMemoryUserRepository()\nuser_service = UserService(user_repo)\nuser_handler = UserHandler(user_service)\n\n# Le service ne conna\u00eet pas l'impl\u00e9mentation concr\u00e8te du repository\n</code></pre>"},{"location":"architecture/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Syst\u00e8me d'exceptions personnalis\u00e9es avec logging appropri\u00e9 :</p> <pre><code>class DatabaseError(AppException):\n    \"\"\"Erreur li\u00e9e \u00e0 la base de donn\u00e9es\"\"\"\n    def __init__(self, message: str):\n        super().__init__(f\"Erreur base de donn\u00e9es : {message}\", 500)\n\nclass NotFoundError(AppException):\n    \"\"\"Ressource non trouv\u00e9e\"\"\"\n    def __init__(self, resource: str):\n        super().__init__(f\"{resource} non trouv\u00e9\", 404)\n</code></pre>"},{"location":"architecture/#pattern-repository","title":"Pattern Repository","text":"<p>Abstraction de l'acc\u00e8s aux donn\u00e9es :</p> <pre><code>class UserRepository(ABC):\n    @abstractmethod\n    def save(self, user: User) -&gt; User:\n        pass\n\n    @abstractmethod\n    def find_by_id(self, user_id: int) -&gt; User | None:\n        pass\n\n    @abstractmethod\n    def find_all(self) -&gt; list[User]:\n        pass\n</code></pre>"},{"location":"architecture/#avantages-de-cette-architecture","title":"Avantages de cette architecture","text":""},{"location":"architecture/#maintenabilite","title":"Maintenabilit\u00e9","text":"<ul> <li>Code organis\u00e9 et facile \u00e0 naviguer</li> <li>Responsabilit\u00e9s clairement s\u00e9par\u00e9es</li> <li>Tests unitaires facilit\u00e9s</li> </ul>"},{"location":"architecture/#testabilite","title":"Testabilit\u00e9","text":"<ul> <li>Injection de d\u00e9pendances permet le mocking</li> <li>Chaque couche peut \u00eatre test\u00e9e ind\u00e9pendamment</li> <li>Tests d'int\u00e9gration entre couches</li> </ul>"},{"location":"architecture/#evolutivite","title":"\u00c9volutivit\u00e9","text":"<ul> <li>Ajout de nouvelles fonctionnalit\u00e9s sans modifier le code existant</li> <li>Changement d'impl\u00e9mentation (ex: DB) sans impact sur la logique m\u00e9tier</li> <li>Support de diff\u00e9rentes interfaces (API, CLI, etc.)</li> </ul>"},{"location":"architecture/#robustesse","title":"Robustesse","text":"<ul> <li>Gestion d'erreurs centralis\u00e9e</li> <li>Logging structur\u00e9</li> <li>Validation des donn\u00e9es \u00e0 chaque couche \u0000 \u0000</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#variables-denvironnement","title":"Variables d'environnement","text":"<p>L'application utilise des variables d'environnement pour sa configuration. Copiez le fichier <code>.env.example</code> vers <code>.env</code> et ajustez les valeurs selon vos besoins.</p>"},{"location":"configuration/#configuration-generale","title":"Configuration g\u00e9n\u00e9rale","text":"<pre><code># Nom de l'application\nAPP_NAME=Python Starter Template\n\n# Niveau de log (DEBUG, INFO, WARNING, ERROR, CRITICAL)\nLOG_LEVEL=INFO\n\n# Fuseau horaire pour les logs\nLOG_TIMEZONE=Europe/Paris\n\n# Chemin du fichier de logs (optionnel)\nLOG_FILE_PATH=logs/app.log\n</code></pre>"},{"location":"configuration/#base-de-donnees","title":"Base de donn\u00e9es","text":"<pre><code># URL de connexion \u00e0 la base de donn\u00e9es\n# SQLite (par d\u00e9faut)\nDATABASE_URL=sqlite:///./app.db\n\n# PostgreSQL\n# DATABASE_URL=postgresql://user:password@localhost/dbname\n\n# MySQL\n# DATABASE_URL=mysql://user:password@localhost/dbname\n</code></pre>"},{"location":"configuration/#configuration-email-optionnel","title":"Configuration email (optionnel)","text":"<pre><code># Serveur SMTP\nSMTP_SERVER=smtp.gmail.com\nSMTP_PORT=587\n\n# Authentification\nSMTP_USERNAME=your-email@gmail.com\nSMTP_PASSWORD=your-app-password\n\n# Configuration des emails\nSMTP_FROM_EMAIL=your-email@gmail.com\nSMTP_TO_EMAIL=admin@example.com\n\n# Utiliser TLS\nSMTP_USE_TLS=true\n</code></pre>"},{"location":"configuration/#configuration-pydantic","title":"Configuration Pydantic","text":"<p>La configuration utilise Pydantic v2 avec <code>pydantic-settings</code>. Les settings sont d\u00e9finis dans <code>src/app/core/settings.py</code>.</p>"},{"location":"configuration/#structure-des-settings","title":"Structure des settings","text":"<pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    # Configuration g\u00e9n\u00e9rale\n    app_name: str = \"Python Starter Template\"\n    log_level: str = \"INFO\"\n    log_timezone: str = \"Europe/Paris\"\n\n    # Base de donn\u00e9es\n    database_url: str = \"sqlite:///./test.db\"\n\n    # Email (optionnel)\n    smtp_server: str | None = None\n    smtp_from_email: str | None = None\n    smtp_to_email: str | None = None\n\n    class Config:\n        env_file = \".env\"\n        case_sensitive = False\n</code></pre>"},{"location":"configuration/#configuration-des-logs","title":"Configuration des logs","text":"<p>Le syst\u00e8me de logs utilise Rich pour l'affichage color\u00e9 en console et RotatingFileHandler pour la rotation des fichiers.</p>"},{"location":"configuration/#niveaux-de-log","title":"Niveaux de log","text":"<ul> <li><code>DEBUG</code> : Informations d\u00e9taill\u00e9es pour le d\u00e9veloppement</li> <li><code>INFO</code> : Informations g\u00e9n\u00e9rales sur le fonctionnement</li> <li><code>WARNING</code> : Avertissements sur des situations potentiellement probl\u00e9matiques</li> <li><code>ERROR</code> : Erreurs qui n'arr\u00eatent pas l'application</li> <li><code>CRITICAL</code> : Erreurs critiques qui peuvent arr\u00eater l'application</li> </ul>"},{"location":"configuration/#configuration-avancee","title":"Configuration avanc\u00e9e","text":"<pre><code># Dans le code, configurer les logs comme suit :\nfrom app.services.logs import get_logger\n\nlogger = get_logger(__name__)\nlogger.info(\"Message d'information\")\nlogger.error(\"Message d'erreur\")\n</code></pre>"},{"location":"configuration/#validation-de-la-configuration","title":"Validation de la configuration","text":"<p>Pour v\u00e9rifier que votre configuration est valide :</p> <pre><code># Tester le chargement des settings\npython -c \"from app.core.settings import settings; print(f'App: {settings.app_name}')\"\n\n# Tester la connexion \u00e0 la base de donn\u00e9es\npython -c \"from app.db.connection import DatabaseConnection; db = DatabaseConnection(); print('\u2705 Connexion DB OK')\"\n</code></pre>"},{"location":"configuration/#configuration-en-production","title":"Configuration en production","text":"<p>En production, utilisez des variables d'environnement plut\u00f4t qu'un fichier <code>.env</code> :</p> <pre><code>export APP_NAME=\"Mon Application\"\nexport DATABASE_URL=\"postgresql://prod-user:prod-pass@db-host/prod-db\"\nexport LOG_LEVEL=\"WARNING\"\n</code></pre> <p>Ou utilisez des secrets Docker/Kubernetes selon votre plateforme de d\u00e9ploiement. \u0000 \u0000</p>"},{"location":"deployment/","title":"D\u00e9ploiement","text":""},{"location":"deployment/#vue-densemble","title":"Vue d'ensemble","text":"<p>Ce guide explique comment d\u00e9ployer l'application Python Starter Template en production. L'application supporte plusieurs m\u00e9thodes de d\u00e9ploiement : Docker, serveur traditionnel, et cloud.</p>"},{"location":"deployment/#prerequis-de-production","title":"Pr\u00e9requis de production","text":""},{"location":"deployment/#variables-denvironnement","title":"Variables d'environnement","text":"<p>Cr\u00e9ez un fichier <code>.env</code> avec les valeurs de production :</p> <pre><code># Configuration de production\nAPP_NAME=Mon Application\nLOG_LEVEL=WARNING\nLOG_TIMEZONE=Europe/Paris\n\n# Base de donn\u00e9es de production\nDATABASE_URL=postgresql://user:password@db-host:5432/prod_db\n\n# S\u00e9curit\u00e9\nSECRET_KEY=votre-cle-secrete-tr\u00e8s-longue-et-complexe\n\n# Email de production\nSMTP_SERVER=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=contact@mondomaine.com\nSMTP_PASSWORD=votre-mot-de-passe-app\nSMTP_FROM_EMAIL=contact@mondomaine.com\nSMTP_TO_EMAIL=admin@mondomaine.com\n</code></pre>"},{"location":"deployment/#base-de-donnees","title":"Base de donn\u00e9es","text":"<p>L'application supporte plusieurs SGBD :</p> <ul> <li>SQLite : Pour les tests et d\u00e9veloppement</li> <li>PostgreSQL : Recommand\u00e9 pour la production</li> <li>MySQL : Support\u00e9 mais moins test\u00e9</li> </ul>"},{"location":"deployment/#configuration-postgresql","title":"Configuration PostgreSQL","text":"<pre><code>-- Cr\u00e9er la base de donn\u00e9es\nCREATE DATABASE prod_db;\n\n-- Cr\u00e9er l'utilisateur\nCREATE USER app_user WITH PASSWORD 'secure_password';\n\n-- Donner les permissions\nGRANT ALL PRIVILEGES ON DATABASE prod_db TO app_user;\n</code></pre>"},{"location":"deployment/#deploiement-avec-docker","title":"D\u00e9ploiement avec Docker","text":""},{"location":"deployment/#construction-de-limage","title":"Construction de l'image","text":"<pre><code># Construction de l'image\ndocker build -t python-starter-template:latest .\n\n# V\u00e9rification\ndocker images python-starter-template\n</code></pre>"},{"location":"deployment/#execution-en-conteneur","title":"Ex\u00e9cution en conteneur","text":"<pre><code># Ex\u00e9cution simple\ndocker run -d \\\n  --name python-app \\\n  -p 8000:8000 \\\n  --env-file .env \\\n  python-starter-template:latest\n\n# Avec volume pour les logs\ndocker run -d \\\n  --name python-app \\\n  -p 8000:8000 \\\n  -v /opt/app/logs:/app/logs \\\n  --env-file .env \\\n  python-starter-template:latest\n</code></pre>"},{"location":"deployment/#docker-compose","title":"Docker Compose","text":"<p>Utilisez le <code>docker-compose.yml</code> fourni :</p> <pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"8000:8000\"\n    env_file:\n      - .env\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: prod_db\n      POSTGRES_USER: app_user\n      POSTGRES_PASSWORD: secure_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n</code></pre> <pre><code># D\u00e9marrage\ndocker-compose up -d\n\n# Suivi des logs\ndocker-compose logs -f app\n\n# Arr\u00eat\ndocker-compose down\n</code></pre>"},{"location":"deployment/#deploiement-traditionnel","title":"D\u00e9ploiement traditionnel","text":""},{"location":"deployment/#avec-gunicorn","title":"Avec Gunicorn","text":"<pre><code># Installation\npip install gunicorn\n\n# Configuration de production\npip install --upgrade pip\npip install -e .\n\n# Lancement avec Gunicorn\ngunicorn \\\n  --bind 0.0.0.0:8000 \\\n  --workers 4 \\\n  --worker-class uvicorn.workers.UvicornWorker \\\n  --access-logfile logs/access.log \\\n  --error-logfile logs/error.log \\\n  app.handlers.user_handler:app\n</code></pre>"},{"location":"deployment/#avec-uvicorn","title":"Avec uvicorn","text":"<pre><code># Installation\npip install uvicorn[standard]\n\n# Lancement\nuvicorn \\\n  --host 0.0.0.0 \\\n  --port 8000 \\\n  --workers 4 \\\n  --access-log \\\n  app.handlers.user_handler:app\n</code></pre>"},{"location":"deployment/#systemd-linux","title":"Systemd (Linux)","text":"<p>Cr\u00e9ez un service systemd <code>/etc/systemd/system/python-app.service</code> :</p> <pre><code>[Unit]\nDescription=Python Starter Template\nAfter=network.target\n\n[Service]\nUser=appuser\nGroup=appuser\nWorkingDirectory=/opt/python-app\nEnvironment=PATH=/opt/python-app/venv/bin\nExecStart=/opt/python-app/venv/bin/gunicorn --bind 0.0.0.0:8000 --workers 4 --worker-class uvicorn.workers.UvicornWorker app.handlers.user_handler:app\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <pre><code># Recharger systemd\nsudo systemctl daemon-reload\n\n# D\u00e9marrer le service\nsudo systemctl start python-app\n\n# Activer au d\u00e9marrage\nsudo systemctl enable python-app\n\n# Suivre les logs\nsudo journalctl -u python-app -f\n</code></pre>"},{"location":"deployment/#deploiement-cloud","title":"D\u00e9ploiement cloud","text":""},{"location":"deployment/#heroku","title":"Heroku","text":"<ol> <li> <p>Pr\u00e9paration : <pre><code># Cr\u00e9er requirements.txt pour Heroku\npip freeze &gt; requirements.txt\n\n# Cr\u00e9er Procfile\necho \"web: gunicorn --bind 0.0.0.0:\\$PORT --workers 1 --worker-class uvicorn.workers.UvicornWorker app.handlers.user_handler:app\" &gt; Procfile\n</code></pre></p> </li> <li> <p>D\u00e9ploiement : <pre><code># Cr\u00e9er l'application Heroku\nheroku create votre-app-name\n\n# Configurer les variables d'environnement\nheroku config:set APP_NAME=\"Mon App\"\nheroku config:set DATABASE_URL=\"postgresql://...\"\n\n# D\u00e9ployer\ngit push heroku main\n</code></pre></p> </li> </ol>"},{"location":"deployment/#railway","title":"Railway","text":"<ol> <li> <p>Connexion : <pre><code># Installer Railway CLI\nnpm install -g @railway/cli\n\n# Se connecter\nrailway login\n</code></pre></p> </li> <li> <p>D\u00e9ploiement : <pre><code># Cr\u00e9er un projet\nrailway init\n\n# D\u00e9ployer\nrailway up\n</code></pre></p> </li> </ol>"},{"location":"deployment/#vercel-pour-api-seulement","title":"Vercel (pour API seulement)","text":"<pre><code># Installer Vercel CLI\nnpm install -g vercel\n\n# D\u00e9ployer\nvercel --prod\n</code></pre>"},{"location":"deployment/#configuration-du-reverse-proxy","title":"Configuration du reverse proxy","text":""},{"location":"deployment/#nginx","title":"Nginx","text":"<p>Configuration exemple pour Nginx :</p> <pre><code>server {\n    listen 80;\n    server_name votre-domaine.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # Logs\n    access_log /var/log/nginx/app_access.log;\n    error_log /var/log/nginx/app_error.log;\n\n    # S\u00e9curit\u00e9\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n}\n</code></pre>"},{"location":"deployment/#apache","title":"Apache","text":"<p>Configuration exemple pour Apache :</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName votre-domaine.com\n\n    ProxyPass / http://127.0.0.1:8000/\n    ProxyPassReverse / http://127.0.0.1:8000/\n\n    ErrorLog ${APACHE_LOG_DIR}/app_error.log\n    CustomLog ${APACHE_LOG_DIR}/app_access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"deployment/#monitoring-et-logging","title":"Monitoring et logging","text":""},{"location":"deployment/#logs","title":"Logs","text":"<p>Les logs sont automatiquement configur\u00e9s avec rotation :</p> <pre><code># Structure des logs\nlogs/\n\u251c\u2500\u2500 app.log          # Logs principaux\n\u251c\u2500\u2500 app.log.1        # Archive 1\n\u251c\u2500\u2500 app.log.2        # Archive 2\n\u2514\u2500\u2500 access.log       # Logs d'acc\u00e8s (avec Gunicorn)\n</code></pre>"},{"location":"deployment/#metriques","title":"M\u00e9triques","text":"<p>Pour le monitoring, consid\u00e9rez :</p> <ul> <li>Prometheus : Collecte de m\u00e9triques</li> <li>Grafana : Visualisation des m\u00e9triques</li> <li>Sentry : Gestion des erreurs</li> <li>DataDog : Monitoring complet</li> </ul>"},{"location":"deployment/#health-checks","title":"Health checks","text":"<p>L'application fournit un endpoint de health check :</p> <pre><code># V\u00e9rifier la sant\u00e9\ncurl http://localhost:8000/health\n\n# Avec Docker\ndocker ps\ndocker stats\n</code></pre>"},{"location":"deployment/#securite","title":"S\u00e9curit\u00e9","text":""},{"location":"deployment/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ol> <li>Variables d'environnement : Ne jamais commiter les secrets</li> <li>HTTPS : Toujours utiliser HTTPS en production</li> <li>Firewall : Limiter l'acc\u00e8s aux ports n\u00e9cessaires</li> <li>Mises \u00e0 jour : Maintenir les d\u00e9pendances \u00e0 jour</li> <li>Sauvegardes : Sauvegarder r\u00e9guli\u00e8rement la base de donn\u00e9es</li> </ol>"},{"location":"deployment/#configuration-de-securite","title":"Configuration de s\u00e9curit\u00e9","text":"<pre><code># G\u00e9n\u00e9rer une cl\u00e9 secr\u00e8te\npython -c \"import secrets; print(secrets.token_urlsafe(32))\"\n\n# Utiliser HTTPS\n# Configuration Nginx avec Let's Encrypt\ncertbot --nginx -d votre-domaine.com\n</code></pre>"},{"location":"deployment/#performance","title":"Performance","text":""},{"location":"deployment/#optimisations","title":"Optimisations","text":"<ol> <li>Workers Gunicorn : <code>workers = 2 * CPU + 1</code></li> <li>Cache : Utiliser Redis pour le cache</li> <li>CDN : Servir les assets statiques via CDN</li> <li>Database : Optimiser les requ\u00eates et utiliser des indexes</li> </ol>"},{"location":"deployment/#scaling","title":"Scaling","text":"<ul> <li>Horizontal : Plusieurs instances derri\u00e8re un load balancer</li> <li>Vertical : Augmenter les ressources de la machine</li> <li>Database : Read replicas pour les lectures</li> </ul>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#problemes-courants","title":"Probl\u00e8mes courants","text":"<ol> <li> <p>Port d\u00e9j\u00e0 utilis\u00e9 : <pre><code># Trouver le processus\nlsof -i :8000\n\n# Tuer le processus\nkill -9 &lt;PID&gt;\n</code></pre></p> </li> <li> <p>M\u00e9moire pleine : <pre><code># V\u00e9rifier l'usage m\u00e9moire\ndocker stats\n\n# Red\u00e9marrer le conteneur\ndocker-compose restart app\n</code></pre></p> </li> <li> <p>Base de donn\u00e9es indisponible : <pre><code># V\u00e9rifier la connexion\ndocker-compose logs db\n\n# Red\u00e9marrer la DB\ndocker-compose restart db\n</code></pre></p> </li> </ol>"},{"location":"deployment/#logs-de-debug","title":"Logs de debug","text":"<p><pre><code># Logs d\u00e9taill\u00e9s\nLOG_LEVEL=DEBUG python src/main.py\n\n# Logs Docker\ndocker-compose logs -f --tail=100 app\n\n# Logs syst\u00e8me\nsudo journalctl -u python-app -f\n</code></pre> \u0000 \u0000</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Python 3.13 ou sup\u00e9rieur</li> <li>Git</li> <li>(Optionnel) Docker pour le d\u00e9ploiement</li> </ul>"},{"location":"installation/#installation-rapide","title":"Installation rapide","text":"<pre><code># Cloner le repository\ngit clone https://github.com/Chouteau49/python-starter-template.git\ncd python-starter-template\n\n# Cr\u00e9er un environnement virtuel\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# ou\nvenv\\Scripts\\activate     # Windows\n\n# Installer les d\u00e9pendances\npip install -e .\n\n# Copier le fichier d'environnement exemple\ncp .env.example .env\n\n# Modifier la configuration dans .env si n\u00e9cessaire\n</code></pre>"},{"location":"installation/#installation-avec-docker","title":"Installation avec Docker","text":"<pre><code># Construire l'image\ndocker build -t python-starter-template .\n\n# Lancer le conteneur\ndocker run -p 8000:8000 python-starter-template\n</code></pre>"},{"location":"installation/#verification-de-linstallation","title":"V\u00e9rification de l'installation","text":"<pre><code># Lancer l'application\npython src/main.py\n\n# Lancer les tests\npytest tests/\n\n# V\u00e9rifier le linting\nruff check src/\n\n# Formater le code\nruff format src/\n</code></pre>"},{"location":"installation/#developpement","title":"D\u00e9veloppement","text":""},{"location":"installation/#configuration-des-hooks-pre-commit","title":"Configuration des hooks pre-commit","text":"<pre><code># Installer pre-commit\npip install pre-commit\n\n# Installer les hooks\npre-commit install\n</code></pre>"},{"location":"installation/#variables-denvironnement","title":"Variables d'environnement","text":"<p>Copiez <code>.env.example</code> vers <code>.env</code> et ajustez les valeurs selon vos besoins :</p> <pre><code># Configuration de l'application\nAPP_NAME=Python Starter Template\nLOG_LEVEL=INFO\nLOG_TIMEZONE=Europe/Paris\n\n# Base de donn\u00e9es\nDATABASE_URL=sqlite:///./app.db\n\n# Email (optionnel)\nSMTP_SERVER=smtp.gmail.com\nSMTP_FROM_EMAIL=your-email@gmail.com\nSMTP_TO_EMAIL=admin@example.com\n</code></pre>"},{"location":"installation/#verification-de-la-configuration","title":"V\u00e9rification de la configuration","text":"<p>Une fois l'installation termin\u00e9e, vous pouvez v\u00e9rifier que tout fonctionne correctement :</p> <p><pre><code># Tester l'import des modules principaux\npython -c \"from app.application import Application; print('\u2705 Import r\u00e9ussi')\"\n\n# V\u00e9rifier la version\npython -c \"from app._version import version; print(f'Version: {version}')\"\n</code></pre> ``` \u0000 \u0000</p>"},{"location":"releases/","title":"Releases","text":""},{"location":"releases/#historique-des-versions","title":"Historique des versions","text":"<p>Ce document pr\u00e9sente l'historique des versions du Python Starter Template, avec les changements majeurs et les notes de migration.</p>"},{"location":"releases/#version-012-2025-10-27","title":"Version 0.1.2 (2025-10-27)","text":""},{"location":"releases/#nouvelles-fonctionnalites","title":"\u2728 Nouvelles fonctionnalit\u00e9s","text":"<ul> <li>Modernisation compl\u00e8te : Migration vers Python 3.13+ et standards 2025</li> <li>Architecture SOLID : Refactorisation compl\u00e8te avec s\u00e9paration des couches</li> <li>Pydantic v2 : Utilisation de la derni\u00e8re version avec pydantic-settings</li> <li>Rich logging : Syst\u00e8me de logs color\u00e9s avec rotation et timezone Paris</li> <li>API REST compl\u00e8te : Endpoints CRUD pour la gestion des utilisateurs avec FastAPI</li> <li>Tests TDD : Suite de tests compl\u00e8te avec pytest et couverture</li> <li>CI/CD GitHub Actions : Pipeline complet de build, test et d\u00e9ploiement</li> <li>Docker multi-\u00e9tapes : Images optimis\u00e9es pour production</li> <li>MkDocs : Documentation compl\u00e8te avec API docs</li> <li>Towncrier : Gestion automatis\u00e9e du CHANGELOG</li> <li>Ruff : Linting et formatage ultra-rapide</li> <li>Pre-commit hooks : Qualit\u00e9 automatique du code</li> </ul>"},{"location":"releases/#changements-techniques","title":"\ud83d\udd27 Changements techniques","text":"<ul> <li>Migration de <code>requirements.txt</code> vers <code>pyproject.toml</code></li> <li>Suppression des anciens fichiers de config (config.ini, logging.ini)</li> <li>Impl\u00e9mentation du pattern Repository pour l'acc\u00e8s aux donn\u00e9es</li> <li>Injection de d\u00e9pendances dans tous les services</li> <li>Gestion d'erreurs centralis\u00e9e avec exceptions personnalis\u00e9es</li> <li>Versioning automatique avec setuptools-scm</li> </ul>"},{"location":"releases/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Guide d'installation complet</li> <li>Documentation de configuration</li> <li>Guide d'architecture d\u00e9taill\u00e9</li> <li>Documentation API avec exemples</li> <li>Guide de d\u00e9ploiement multi-plateforme</li> </ul>"},{"location":"releases/#corrections","title":"\ud83d\udc1b Corrections","text":"<ul> <li>Correction des imports absolus</li> <li>R\u00e9solution des conflits de d\u00e9pendances</li> <li>Am\u00e9lioration de la gestion des timezones</li> <li>Correction des types Pydantic v2</li> </ul>"},{"location":"releases/#version-011-2025-10-26","title":"Version 0.1.1 (2025-10-26)","text":""},{"location":"releases/#nouvelles-fonctionnalites_1","title":"\u2728 Nouvelles fonctionnalit\u00e9s","text":"<ul> <li>Ajout du syst\u00e8me de logging moderne</li> <li>Impl\u00e9mentation des mod\u00e8les Pydantic de base</li> <li>Configuration initiale avec variables d'environnement</li> <li>Structure de projet modulaire</li> </ul>"},{"location":"releases/#ameliorations","title":"\ud83d\udd27 Am\u00e9liorations","text":"<ul> <li>Mise \u00e0 jour des d\u00e9pendances</li> <li>Configuration Docker de base</li> <li>Scripts d'initialisation</li> </ul>"},{"location":"releases/#version-010-2025-10-25","title":"Version 0.1.0 (2025-10-25)","text":""},{"location":"releases/#fonctionnalites-initiales","title":"\u2728 Fonctionnalit\u00e9s initiales","text":"<ul> <li>Structure de base du projet</li> <li>Configuration minimale</li> <li>Application principale fonctionnelle</li> <li>Tests de base</li> </ul>"},{"location":"releases/#politique-de-versionnement","title":"Politique de versionnement","text":"<p>Ce projet suit le Semantic Versioning :</p> <ul> <li>MAJOR : Changements incompatibles</li> <li>MINOR : Nouvelles fonctionnalit\u00e9s compatibles</li> <li>PATCH : Corrections de bugs</li> </ul>"},{"location":"releases/#prochaines-versions","title":"Prochaines versions","text":""},{"location":"releases/#version-020-planifiee","title":"Version 0.2.0 (Planifi\u00e9e)","text":"<ul> <li>Authentification JWT</li> <li>Pagination des API</li> <li>Cache Redis</li> <li>M\u00e9triques Prometheus</li> <li>Tests d'int\u00e9gration</li> <li>Interface web de base</li> </ul>"},{"location":"releases/#version-030-planifiee","title":"Version 0.3.0 (Planifi\u00e9e)","text":"<ul> <li>Microservices optionnels</li> <li>WebSockets</li> <li>File upload</li> <li>Internationalisation</li> <li>Rate limiting</li> <li>API versioning</li> </ul>"},{"location":"releases/#version-100-planifiee","title":"Version 1.0.0 (Planifi\u00e9e)","text":"<ul> <li>Production ready</li> <li>S\u00e9curit\u00e9 renforc\u00e9e</li> <li>Monitoring complet</li> <li>Haute disponibilit\u00e9</li> <li>Support multi-tenant</li> </ul>"},{"location":"releases/#migration-entre-versions","title":"Migration entre versions","text":""},{"location":"releases/#de-011-a-012","title":"De 0.1.1 \u00e0 0.1.2","text":"<ol> <li>Sauvegarde : Sauvegardez votre code personnalis\u00e9</li> <li>Migration des d\u00e9pendances :    <pre><code># Supprimer l'ancien environnement\nrm -rf venv/\n\n# Recr\u00e9er avec les nouvelles d\u00e9pendances\npython -m venv venv\nsource venv/bin/activate\npip install -e .\n</code></pre></li> <li>Configuration :</li> <li>Copiez <code>.env.example</code> vers <code>.env</code></li> <li>Ajustez les variables d'environnement</li> <li>Migrez les configurations personnalis\u00e9es</li> <li>Code :</li> <li>Adaptez les imports pour utiliser les nouveaux modules</li> <li>Mettez \u00e0 jour les r\u00e9f\u00e9rences aux services</li> <li>V\u00e9rifiez la compatibilit\u00e9 des mod\u00e8les</li> </ol>"},{"location":"releases/#de-010-a-011","title":"De 0.1.0 \u00e0 0.1.1","text":"<ol> <li>Mise \u00e0 jour des d\u00e9pendances :    <pre><code>pip install --upgrade -r requirements.txt\n</code></pre></li> <li>Configuration des logs :</li> <li>Ajoutez les variables d'environnement de logging</li> <li>Cr\u00e9ez le dossier <code>logs/</code> si n\u00e9cessaire</li> </ol>"},{"location":"releases/#support-des-versions","title":"Support des versions","text":"<ul> <li>Versions actuelles : 0.1.x - Support complet</li> <li>Versions LTS : Aucune pour le moment</li> <li>Versions obsol\u00e8tes : 0.0.x - Plus support\u00e9es</li> </ul>"},{"location":"releases/#contribution-aux-releases","title":"Contribution aux releases","text":""},{"location":"releases/#processus-de-release","title":"Processus de release","text":"<ol> <li>D\u00e9veloppement : Fonctionnalit\u00e9s d\u00e9velopp\u00e9es sur des branches feature</li> <li>Tests : Tous les tests passent en CI/CD</li> <li>Review : Code review obligatoire</li> <li>Merge : Int\u00e9gration dans main</li> <li>Release : Cr\u00e9ation automatique via GitHub Actions</li> </ol>"},{"location":"releases/#fragments-de-changelog","title":"Fragments de changelog","text":"<p>Utilisez <code>towncrier</code> pour ajouter des entr\u00e9es au changelog :</p> <pre><code># Nouvelle fonctionnalit\u00e9\ntowncrier create --content \"Ajout de l'authentification JWT\" feature\n\n# Correction de bug\ntowncrier create --content \"Correction de la validation email\" bugfix\n\n# Changement breaking\ntowncrier create --content \"Refactorisation de l'API utilisateurs\" breaking\n</code></pre>"},{"location":"releases/#types-de-changements","title":"Types de changements","text":"<ul> <li>feature : Nouvelles fonctionnalit\u00e9s</li> <li>bugfix : Corrections de bugs</li> <li>doc : Changements de documentation</li> <li>removal : Suppressions de fonctionnalit\u00e9s</li> <li>breaking : Changements incompatibles</li> <li>misc : Divers (refactorisation, performance, etc.)</li> </ul>"},{"location":"releases/#securite","title":"S\u00e9curit\u00e9","text":""},{"location":"releases/#vulnerabilites-connues","title":"Vuln\u00e9rabilit\u00e9s connues","text":"<p>Aucune vuln\u00e9rabilit\u00e9 connue dans les versions 0.1.x.</p>"},{"location":"releases/#mises-a-jour-de-securite","title":"Mises \u00e0 jour de s\u00e9curit\u00e9","text":"<ul> <li>Surveillez les d\u00e9pendances avec <code>pip-audit</code></li> <li>Appliquez les mises \u00e0 jour de s\u00e9curit\u00e9 rapidement</li> <li>Utilisez des images Docker \u00e0 jour</li> </ul>"},{"location":"releases/#telechargements","title":"T\u00e9l\u00e9chargements","text":""},{"location":"releases/#sources","title":"Sources","text":"<ul> <li>GitHub : https://github.com/Chouteau49/python-starter-template</li> <li>Tags : https://github.com/Chouteau49/python-starter-template/tags</li> </ul>"},{"location":"releases/#images-docker","title":"Images Docker","text":"<pre><code># Derni\u00e8re version\ndocker pull ghcr.io/chouteau49/python-starter-template:latest\n\n# Version sp\u00e9cifique\ndocker pull ghcr.io/chouteau49/python-starter-template:0.1.2\n</code></pre>"},{"location":"releases/#remerciements","title":"Remerciements","text":"<p>Merci aux contributeurs et \u00e0 la communaut\u00e9 Python pour leur soutien continu dans l'am\u00e9lioration de ce template. \u0000 \u0000</p>"},{"location":"todo_upgrade/","title":"Plan d'Upgrade du Projet Python Starter Template","text":"<p>Ce document liste les am\u00e9liorations architecturales, de code et de configuration n\u00e9cessaires pour moderniser le projet vers Python 3.13+ avec les bonnes pratiques 2025. Les t\u00e2ches sont ordonn\u00e9es par priorit\u00e9 et d\u00e9pendances.</p>"},{"location":"todo_upgrade/#phase-1-configuration-et-outils-modernes","title":"Phase 1 : Configuration et Outils Modernes","text":"<ol> <li>Remplacer requirements.txt par pyproject.toml \u2705</li> <li>Cr\u00e9er <code>pyproject.toml</code> avec [tool.poetry] ou [build-system] pour g\u00e9rer les d\u00e9pendances, versionnement (setuptools-scm), et configurations Ruff/Pytest.</li> <li>Migrer les d\u00e9pendances de requirements.txt vers pyproject.toml.</li> <li> <p>Supprimer requirements.txt.</p> </li> <li> <p>Supprimer bumpversion.cfg et int\u00e9grer versionnement moderne \u2705</p> </li> <li>Configurer setuptools-scm dans pyproject.toml pour le versionnement automatique bas\u00e9 sur Git tags.</li> <li> <p>Mettre \u00e0 jour les fichiers qui utilisent bumpversion (application.py, README.md, docker-compose.yml) pour utiliser setuptools-scm.</p> </li> <li> <p>Mettre \u00e0 jour la configuration \u2705</p> </li> <li>Remplacer config.ini par des variables d'environnement (via python-dotenv).</li> <li>Cr\u00e9er un fichier .env.example avec les variables n\u00e9cessaires (LOG_LEVEL, LOG_FILE_PATH, etc.).</li> <li> <p>Supprimer config/ et config_samples/.</p> </li> <li> <p>Ajouter hooks pre-commit \u2705</p> </li> <li>Cr\u00e9er <code>.pre-commit-config.yaml</code> pour ex\u00e9cuter Ruff, black, isort, mypy, etc., avant chaque commit.</li> </ol>"},{"location":"todo_upgrade/#phase-2-architecture-et-code","title":"Phase 2 : Architecture et Code","text":"<ol> <li>Refactoriser l'architecture en couches modulaires \u2705</li> <li>R\u00e9organiser src/app/ en couches : core/, models/, services/, handlers/, db/, repo/.</li> <li>Impl\u00e9menter POO avec typage statique (PEP 484/585).</li> <li>Appliquer patterns SOLID et injection de d\u00e9pendances.</li> <li> <p>Cr\u00e9er des exemples de code pour chaque couche (service, mod\u00e8le, handler).</p> </li> <li> <p>Am\u00e9liorer le syst\u00e8me de logs \u2705</p> </li> <li>Int\u00e9grer logging avec couleurs (rich ou colorama).</li> <li>Ajouter rotation et archivage des logs.</li> <li>Configurer via variables d'env (LOG_LEVEL, LOG_FILE_PATH, LOG_TIMEZONE=Europe/Paris).</li> <li> <p>\u00c9crire des logs dans toutes les m\u00e9thodes (debug, info, warning, etc.).</p> </li> <li> <p>Ajouter gestion d'erreurs et exceptions \u2705</p> </li> <li>Cr\u00e9er des exceptions personnalis\u00e9es.</li> <li>Logger les erreurs sans masquer les d\u00e9tails.</li> </ol>"},{"location":"todo_upgrade/#phase-3-tests-et-qualite","title":"Phase 3 : Tests et Qualit\u00e9","text":"<ol> <li>Impl\u00e9menter TDD avec Pytest \u2705</li> <li>Ajouter tests unitaires, d'int\u00e9gration et E2E.</li> <li>Configurer pytest-cov pour couverture 85% minimum.</li> <li> <p>G\u00e9n\u00e9rer rapports HTML.</p> </li> <li> <p>Configurer Ruff pour linting et formatage \u2705</p> </li> <li>Int\u00e9grer Ruff dans pyproject.toml.</li> <li>Configurer hooks pre-commit pour Ruff.</li> </ol>"},{"location":"todo_upgrade/#phase-4-deploiement-et-cicd","title":"Phase 4 : D\u00e9ploiement et CI/CD","text":"<ol> <li>Mettre \u00e0 jour Docker \u2705</li> <li>Dockerfile : Passer \u00e0 Python 3.13-slim, multi-\u00e9tapes, optimis\u00e9.</li> <li>docker-compose.yml : Ajouter health checks, restarts, variables d'env.</li> <li> <p>Utiliser stacks Portainer pour orchestration.</p> </li> <li> <p>Ajouter workflows GitHub Actions \u2705</p> </li> <li>Cr\u00e9er <code>.github/workflows/ci-cd.yml</code> pour tests, linting, build Docker, d\u00e9ploiement.</li> </ol>"},{"location":"todo_upgrade/#phase-5-documentation-et-finalisation","title":"Phase 5 : Documentation et Finalisation","text":"<ol> <li>G\u00e9n\u00e9rer docs avec MkDocs \u2705</li> <li>Cr\u00e9er docs/ avec guide utilisateur, configuration, architecture, releases, API.</li> <li>Int\u00e9grer diagrammes Mermaid/PlantUML.</li> <li> <p>D\u00e9ployer sur GitHub Pages.</p> </li> <li> <p>Mettre \u00e0 jour README.md \u2705</p> </li> <li>Ajouter guide d'installation d\u00e9taill\u00e9, utilisation, architecture, exemples.</li> <li> <p>Inclure badges, sections pour CI/CD, etc.</p> </li> <li> <p>Ajouter exemples de code \u2705</p> </li> <li> <p>Dans src/, cr\u00e9er des fichiers d'exemple pour illustrer les bonnes pratiques (ex. : UserService, UserModel, AuthHandler).</p> </li> <li> <p>Nettoyer et finaliser \u2705</p> </li> <li>Supprimer scripts/init_env.sh et init_env.ps1 (remplacer par instructions dans README).</li> <li>V\u00e9rifier compatibilit\u00e9 Python 3.13+.</li> <li> <p>Tester l'ensemble du pipeline CI/CD.</p> </li> <li> <p>Automatiser CHANGELOG \u2705</p> </li> <li>Int\u00e9grer Towncrier pour g\u00e9n\u00e9ration automatique du CHANGELOG \u00e0 partir de fragments.</li> <li>Configurer dans pyproject.toml et workflow CI/CD.</li> </ol>"},{"location":"todo_upgrade/#priorites-et-dependances","title":"Priorit\u00e9s et D\u00e9pendances","text":"<ul> <li>Les phases 1 et 2 peuvent \u00eatre parall\u00e8les.</li> <li>Phase 3 d\u00e9pend de la refactorisation architecturale.</li> <li>Phase 4 d\u00e9pend des configurations modernes.</li> <li>Phase 5 d\u00e9pend de tout le reste.</li> </ul> <p>Chaque t\u00e2che sera valid\u00e9e avec tests et linting avant de passer \u00e0 la suivante. \u0000 \u0000 \u0000 \u0000</p>"}]}